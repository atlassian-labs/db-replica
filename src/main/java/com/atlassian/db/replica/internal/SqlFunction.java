package com.atlassian.db.replica.internal;

import java.util.HashSet;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.lang.Math.min;

public class SqlFunction {
    private static final String methodBracketStart = Pattern.quote("(");
    private static final Set<String> standardReadOnlyFunctions = Stream
        .of(
            "abs",
            "cbrt",
            "ceil",
            "ceiling",
            "degrees",
            "div",
            "exp",
            "floor",
            "ln",
            "log",
            "mod",
            "pi",
            "power",
            "radians",
            "round",
            "sign",
            "sqrt",
            "trunc",
            "width_bucket",
            "random",
            "setseed",
            "acos",
            "asin",
            "atan",
            "atan2",
            "cos",
            "cot",
            "sin",
            "tan",
            "bit_length",
            "char_length",
            "character_length",
            "lower",
            "octet_length",
            "overlay",
            "position",
            "trim",
            "trim",
            "upper",
            "ascii",
            "btrim",
            "chr",
            "concat",
            "concat_ws",
            "convert",
            "convert_from",
            "convert_to",
            "decode",
            "encode",
            "format",
            "initcap",
            "left",
            "lpad",
            "ltrim",
            "md5",
            "pg_client_encoding",
            "quote_ident",
            "quote_literal",
            "quote_nullable",
            "regexp_matches",
            "regexp_replace",
            "regexp_split_to_array",
            "regexp_split_to_table",
            "repeat",
            "replace",
            "reverse",
            "right",
            "rpad",
            "rtrim",
            "split_part",
            "strpos",
            "substr",
            "to_ascii",
            "to_hex",
            "translate",
            "format",
            "overlay",
            "position",
            "substring",
            "trim",
            "btrim",
            "decode",
            "encode",
            "get_bit",
            "get_byte",
            "md5",
            "cast",
            "to_char",
            "to_date",
            "to_number",
            "to_timestamp",
            "age",
            "clock_timestamp",
            "current_date",
            "current_time",
            "current_timestamp",
            "date_part",
            "date_trunc",
            "extract",
            "isfinite",
            "justify_days",
            "justify_hours",
            "justify_interval",
            "localtime",
            "localtimestamp",
            "make_date",
            "make_interval",
            "make_time",
            "make_timestamp",
            "make_timestamptz",
            "now",
            "statement_timestamp",
            "timeofday",
            "transaction_timestamp",
            "pg_sleep",
            "enum_first",
            "enum_last",
            "enum_range",
            "area",
            "center",
            "diameter",
            "height",
            "isclosed",
            "isopen",
            "npoints",
            "pclose",
            "popen",
            "radius",
            "width",
            "box",
            "circle",
            "line",
            "lseg",
            "path",
            "point",
            "polygon",
            "abbrev",
            "broadcast",
            "family",
            "host",
            "hostmask",
            "masklen",
            "netmask",
            "set_masklen",
            "text",
            "trunc",
            "get_current_ts_config",
            "length",
            "numnode",
            "plainto_tsquery",
            "querytree",
            "setweight",
            "strip",
            "to_tsquery",
            "to_tsvector",
            "ts_headline",
            "ts_rank",
            "ts_rank_cd",
            "ts_rewrite",
            "tsvector_update_trigger",
            "tsvector_update_trigger_column",
            "ts_debug",
            "ts_lexize",
            "ts_parse",
            "ts_parse",
            "ts_token_type",
            "ts_token_type",
            "ts_stat",
            "xmlcomment",
            "xmlconcat",
            "xmlelement",
            "xmlforest",
            "xmlpi",
            "xmlroot",
            "xmlagg",
            "xml_is_well_formed",
            "xml_is_well_formed_document",
            "xml_is_well_formed_content",
            "xpath",
            "xpath_exists",
            "table_to_xml",
            "query_to_xml",
            "cursor_to_xml",
            "table_to_xmlschema",
            "query_to_xmlschema",
            "cursor_to_xmlschema",
            "table_to_xml_and_xmlschema",
            "query_to_xml_and_xmlschema",
            "schema_to_xml",
            "schema_to_xmlschema",
            "schema_to_xml_and_xmlschema",
            "database_to_xml",
            "database_to_xmlschema",
            "database_to_xml_and_xmlschema",
            "to_json",
            "array_to_json",
            "row_to_json",
            "json_build_array",
            "json_build_object",
            "json_object",
            "json_array_length",
            "jsonb_array_length",
            "json_each",
            "jsonb_each",
            "json_each_text",
            "jsonb_each_text",
            "json_extract_path",
            "jsonb_extract_path",
            "json_extract_path_text",
            "jsonb_extract_path_text",
            "json_object_keys",
            "jsonb_object_keys",
            "json_populate_record",
            "jsonb_populate_record",
            "json_populate_recordset",
            "jsonb_populate_recordset",
            "json_array_elements",
            "jsonb_array_elements",
            "json_array_elements_text",
            "jsonb_array_elements_text",
            "json_typeof",
            "jsonb_typeof",
            "json_to_record",
            "jsonb_to_record",
            "json_to_recordset",
            "jsonb_to_recordset",
            "currval",
            "lastval",
            "nextval",
            "array_append",
            "array_cat",
            "array_ndims",
            "array_dims",
            "array_fill",
            "array_length",
            "array_lower",
            "array_prepend",
            "array_remove",
            "array_replace",
            "array_to_string",
            "array_upper",
            "cardinality",
            "string_to_array",
            "unnest",
            "unnest",
            "lower",
            "upper",
            "isempty",
            "lower_inc",
            "upper_inc",
            "lower_inf",
            "upper_inf",
            "array_agg",
            "avg",
            "bit_and",
            "bit_or",
            "bool_and",
            "bool_or",
            "count",
            "count",
            "every",
            "json_agg",
            "json_object_agg",
            "max",
            "min",
            "string_agg",
            "sum",
            "xmlagg",
            "corr",
            "covar_pop",
            "covar_samp",
            "regr_avgx",
            "regr_avgy",
            "regr_count",
            "regr_intercept",
            "regr_r2",
            "regr_slope",
            "regr_sxx",
            "regr_sxy",
            "regr_syy",
            "stddev",
            "stddev_pop",
            "stddev_samp",
            "variance",
            "var_pop",
            "var_samp",
            "mode",
            "percentile_cont",
            "percentile_cont",
            "percentile_disc",
            "percentile_disc",
            "rank",
            "dense_rank",
            "percent_rank",
            "cume_dist",
            "row_number",
            "rank",
            "dense_rank",
            "percent_rank",
            "cume_dist",
            "ntile",
            "lag",
            "lead",
            "first_value",
            "last_value",
            "nth_value",
            "exists",
            "in",
            "any",
            "some",
            "all",
            "generate_series",
            "generate_subscripts",
            "current_catalog",
            "current_database",
            "current_query",
            "current_role",
            "current_schema",
            "current_schemas",
            "current_user",
            "inet_client_addr",
            "inet_client_port",
            "inet_server_addr",
            "inet_server_port",
            "pg_backend_pid",
            "pg_conf_load_time",
            "pg_is_other_temp_schema",
            "pg_listening_channels",
            "pg_my_temp_schema",
            "pg_postmaster_start_time",
            "pg_trigger_depth",
            "session_user",
            "user",
            "version",
            "has_any_column_privilege",
            "has_column_privilege",
            "has_database_privilege",
            "has_foreign_data_wrapper_privilege",
            "has_function_privilege",
            "has_language_privilege",
            "has_schema_privilege",
            "has_sequence_privilege",
            "has_server_privilege",
            "has_table_privilege",
            "has_tablespace_privilege",
            "has_type_privilege",
            "pg_has_role",
            "pg_collation_is_visible",
            "pg_conversion_is_visible",
            "pg_function_is_visible",
            "pg_opclass_is_visible",
            "pg_operator_is_visible",
            "pg_opfamily_is_visible",
            "pg_table_is_visible",
            "pg_ts_config_is_visible",
            "pg_ts_dict_is_visible",
            "pg_ts_parser_is_visible",
            "pg_ts_template_is_visible",
            "pg_type_is_visible",
            "format_type",
            "pg_describe_object",
            "pg_identify_object",
            "pg_get_constraintdef",
            "pg_get_expr",
            "pg_get_functiondef",
            "pg_get_function_arguments",
            "pg_get_function_identity_arguments",
            "pg_get_function_result",
            "pg_get_indexdef",
            "pg_get_keywords",
            "pg_get_ruledef",
            "pg_get_serial_sequence",
            "pg_get_triggerdef",
            "pg_get_userbyid",
            "pg_get_viewdef",
            "pg_options_to_table",
            "pg_tablespace_databases",
            "pg_tablespace_location",
            "pg_typeof",
            "collation",
            "to_regclass",
            "to_regproc",
            "to_regprocedure",
            "to_regoper",
            "to_regoperator",
            "to_regtype",
            "col_description",
            "shobj_description",
            "txid_current",
            "txid_current_snapshot",
            "txid_snapshot_xip",
            "txid_snapshot_xmax",
            "txid_snapshot_xmin",
            "txid_visible_in_snapshot"
        )
        .flatMap(name -> Stream.of(name, name.toUpperCase()))
        .collect(Collectors.toCollection(HashSet::new));
    private final Set<String> readOnlyFunctions;

    public SqlFunction(Set<String> readOnlyFunctions) {
        this.readOnlyFunctions = readOnlyFunctions;
    }

    boolean isFunctionCall(String sql) {
        if (sql == null) {
            return false;
        }
        final String mayContainFunction = skipIrrelevantSqlParts(sql);
        final boolean mayBeFunction = mayContainFunction.contains("(");
        if (!mayBeFunction) {
            return false;
        }
        final String potentialMethodName = mayContainFunction.split(methodBracketStart)[0];
        if (standardReadOnlyFunctions.contains(potentialMethodName) || readOnlyFunctions.contains(potentialMethodName)) {
            return false;
        }
        final boolean hasSpaceInPotentialMethodName = potentialMethodName.contains(" ");
        return !hasSpaceInPotentialMethodName;
    }

    /**
     * Skips `SELECT ` at the beginning of the query. Postgres identifiers are limited to
     * 63 characters, so we should be safe to interpret first 80 characters.
     */
    private String skipIrrelevantSqlParts(String sql) {
        return sql.substring(7, min(sql.length(), 80));
    }

}
